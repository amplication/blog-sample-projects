/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlanetService } from "../planet.service";
import { Public } from "../../decorators/public.decorator";
import { PlanetCreateInput } from "./PlanetCreateInput";
import { PlanetWhereInput } from "./PlanetWhereInput";
import { PlanetWhereUniqueInput } from "./PlanetWhereUniqueInput";
import { PlanetFindManyArgs } from "./PlanetFindManyArgs";
import { PlanetUpdateInput } from "./PlanetUpdateInput";
import { Planet } from "./Planet";
import { FilmFindManyArgs } from "../../film/base/FilmFindManyArgs";
import { Film } from "../../film/base/Film";
import { FilmWhereUniqueInput } from "../../film/base/FilmWhereUniqueInput";
import { PersonFindManyArgs } from "../../person/base/PersonFindManyArgs";
import { Person } from "../../person/base/Person";
import { PersonWhereUniqueInput } from "../../person/base/PersonWhereUniqueInput";

export class PlanetControllerBase {
  constructor(protected readonly service: PlanetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Planet })
  async create(@common.Body() data: PlanetCreateInput): Promise<Planet> {
    return await this.service.create({
      data: data,
      select: {
        climates: true,
        createdAt: true,
        description: true,
        diameter: true,
        gravity: true,
        id: true,
        name: true,
        orbitalPeriod: true,
        population: true,
        rotationPeriod: true,
        surfaceWater: true,
        terrains: true,
        updatedAt: true,
      },
    });
  }

  @Public()
  @common.Get()
  @swagger.ApiOkResponse({ type: [Planet] })
  @ApiNestedQuery(PlanetFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Planet[]> {
    const args = plainToClass(PlanetFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        climates: true,
        createdAt: true,
        description: true,
        diameter: true,
        gravity: true,
        id: true,
        name: true,
        orbitalPeriod: true,
        population: true,
        rotationPeriod: true,
        surfaceWater: true,
        terrains: true,
        updatedAt: true,
      },
    });
  }

  @Public()
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Planet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: PlanetWhereUniqueInput
  ): Promise<Planet | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        climates: true,
        createdAt: true,
        description: true,
        diameter: true,
        gravity: true,
        id: true,
        name: true,
        orbitalPeriod: true,
        population: true,
        rotationPeriod: true,
        surfaceWater: true,
        terrains: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Planet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: PlanetWhereUniqueInput,
    @common.Body() data: PlanetUpdateInput
  ): Promise<Planet | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          climates: true,
          createdAt: true,
          description: true,
          diameter: true,
          gravity: true,
          id: true,
          name: true,
          orbitalPeriod: true,
          population: true,
          rotationPeriod: true,
          surfaceWater: true,
          terrains: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Planet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: PlanetWhereUniqueInput
  ): Promise<Planet | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          climates: true,
          createdAt: true,
          description: true,
          diameter: true,
          gravity: true,
          id: true,
          name: true,
          orbitalPeriod: true,
          population: true,
          rotationPeriod: true,
          surfaceWater: true,
          terrains: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @common.Get("/:id/films")
  @ApiNestedQuery(FilmFindManyArgs)
  async findManyFilms(
    @common.Req() request: Request,
    @common.Param() params: PlanetWhereUniqueInput
  ): Promise<Film[]> {
    const query = plainToClass(FilmFindManyArgs, request.query);
    const results = await this.service.findFilms(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        director: true,
        episodeId: true,
        id: true,
        openingCrawl: true,
        producers: true,
        releaseDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/films")
  async connectFilms(
    @common.Param() params: PlanetWhereUniqueInput,
    @common.Body() body: FilmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      films: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/films")
  async updateFilms(
    @common.Param() params: PlanetWhereUniqueInput,
    @common.Body() body: FilmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      films: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/films")
  async disconnectFilms(
    @common.Param() params: PlanetWhereUniqueInput,
    @common.Body() body: FilmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      films: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Get("/:id/people")
  @ApiNestedQuery(PersonFindManyArgs)
  async findManyPeople(
    @common.Req() request: Request,
    @common.Param() params: PlanetWhereUniqueInput
  ): Promise<Person[]> {
    const query = plainToClass(PersonFindManyArgs, request.query);
    const results = await this.service.findPeople(params.id, {
      ...query,
      select: {
        birthYear: true,
        createdAt: true,
        description: true,
        eyeColor: true,
        gender: true,
        hairColor: true,
        height: true,
        id: true,
        mass: true,
        name: true,

        planet: {
          select: {
            id: true,
          },
        },

        skinColor: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/people")
  async connectPeople(
    @common.Param() params: PlanetWhereUniqueInput,
    @common.Body() body: PersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      people: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/people")
  async updatePeople(
    @common.Param() params: PlanetWhereUniqueInput,
    @common.Body() body: PersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      people: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/people")
  async disconnectPeople(
    @common.Param() params: PlanetWhereUniqueInput,
    @common.Body() body: PersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      people: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
