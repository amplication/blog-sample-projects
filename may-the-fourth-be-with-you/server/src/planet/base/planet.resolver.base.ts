/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreatePlanetArgs } from "./CreatePlanetArgs";
import { UpdatePlanetArgs } from "./UpdatePlanetArgs";
import { DeletePlanetArgs } from "./DeletePlanetArgs";
import { PlanetFindManyArgs } from "./PlanetFindManyArgs";
import { PlanetFindUniqueArgs } from "./PlanetFindUniqueArgs";
import { Planet } from "./Planet";
import { FilmFindManyArgs } from "../../film/base/FilmFindManyArgs";
import { Film } from "../../film/base/Film";
import { PersonFindManyArgs } from "../../person/base/PersonFindManyArgs";
import { Person } from "../../person/base/Person";
import { PlanetService } from "../planet.service";
@graphql.Resolver(() => Planet)
export class PlanetResolverBase {
  constructor(protected readonly service: PlanetService) {}

  async _planetsMeta(
    @graphql.Args() args: PlanetFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [Planet])
  async planets(@graphql.Args() args: PlanetFindManyArgs): Promise<Planet[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => Planet, { nullable: true })
  async planet(
    @graphql.Args() args: PlanetFindUniqueArgs
  ): Promise<Planet | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Planet)
  async createPlanet(@graphql.Args() args: CreatePlanetArgs): Promise<Planet> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Planet)
  async updatePlanet(
    @graphql.Args() args: UpdatePlanetArgs
  ): Promise<Planet | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Planet)
  async deletePlanet(
    @graphql.Args() args: DeletePlanetArgs
  ): Promise<Planet | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [Film])
  async films(
    @graphql.Parent() parent: Planet,
    @graphql.Args() args: FilmFindManyArgs
  ): Promise<Film[]> {
    const results = await this.service.findFilms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => [Person])
  async people(
    @graphql.Parent() parent: Planet,
    @graphql.Args() args: PersonFindManyArgs
  ): Promise<Person[]> {
    const results = await this.service.findPeople(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
