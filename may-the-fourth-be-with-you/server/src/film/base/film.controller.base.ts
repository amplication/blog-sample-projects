/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FilmService } from "../film.service";
import { Public } from "../../decorators/public.decorator";
import { FilmCreateInput } from "./FilmCreateInput";
import { FilmWhereInput } from "./FilmWhereInput";
import { FilmWhereUniqueInput } from "./FilmWhereUniqueInput";
import { FilmFindManyArgs } from "./FilmFindManyArgs";
import { FilmUpdateInput } from "./FilmUpdateInput";
import { Film } from "./Film";
import { PersonFindManyArgs } from "../../person/base/PersonFindManyArgs";
import { Person } from "../../person/base/Person";
import { PersonWhereUniqueInput } from "../../person/base/PersonWhereUniqueInput";
import { PlanetFindManyArgs } from "../../planet/base/PlanetFindManyArgs";
import { Planet } from "../../planet/base/Planet";
import { PlanetWhereUniqueInput } from "../../planet/base/PlanetWhereUniqueInput";
import { RaceFindManyArgs } from "../../race/base/RaceFindManyArgs";
import { Race } from "../../race/base/Race";
import { RaceWhereUniqueInput } from "../../race/base/RaceWhereUniqueInput";
import { StarshipFindManyArgs } from "../../starship/base/StarshipFindManyArgs";
import { Starship } from "../../starship/base/Starship";
import { StarshipWhereUniqueInput } from "../../starship/base/StarshipWhereUniqueInput";
import { VehicleFindManyArgs } from "../../vehicle/base/VehicleFindManyArgs";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { VehicleWhereUniqueInput } from "../../vehicle/base/VehicleWhereUniqueInput";

export class FilmControllerBase {
  constructor(protected readonly service: FilmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Film })
  async create(@common.Body() data: FilmCreateInput): Promise<Film> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        description: true,
        director: true,
        episodeId: true,
        id: true,
        openingCrawl: true,
        producers: true,
        releaseDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @Public()
  @common.Get()
  @swagger.ApiOkResponse({ type: [Film] })
  @ApiNestedQuery(FilmFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Film[]> {
    const args = plainToClass(FilmFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        description: true,
        director: true,
        episodeId: true,
        id: true,
        openingCrawl: true,
        producers: true,
        releaseDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @Public()
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Film })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: FilmWhereUniqueInput
  ): Promise<Film | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        description: true,
        director: true,
        episodeId: true,
        id: true,
        openingCrawl: true,
        producers: true,
        releaseDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Film })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() data: FilmUpdateInput
  ): Promise<Film | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          director: true,
          episodeId: true,
          id: true,
          openingCrawl: true,
          producers: true,
          releaseDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Film })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: FilmWhereUniqueInput
  ): Promise<Film | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          description: true,
          director: true,
          episodeId: true,
          id: true,
          openingCrawl: true,
          producers: true,
          releaseDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @common.Get("/:id/person")
  @ApiNestedQuery(PersonFindManyArgs)
  async findManyPerson(
    @common.Req() request: Request,
    @common.Param() params: FilmWhereUniqueInput
  ): Promise<Person[]> {
    const query = plainToClass(PersonFindManyArgs, request.query);
    const results = await this.service.findPerson(params.id, {
      ...query,
      select: {
        birthYear: true,
        createdAt: true,
        description: true,
        eyeColor: true,
        gender: true,
        hairColor: true,
        height: true,
        id: true,
        mass: true,
        name: true,

        planet: {
          select: {
            id: true,
          },
        },

        skinColor: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/person")
  async connectPerson(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: PersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      person: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/person")
  async updatePerson(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: PersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      person: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/person")
  async disconnectPerson(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: PersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      person: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Get("/:id/planet")
  @ApiNestedQuery(PlanetFindManyArgs)
  async findManyPlanet(
    @common.Req() request: Request,
    @common.Param() params: FilmWhereUniqueInput
  ): Promise<Planet[]> {
    const query = plainToClass(PlanetFindManyArgs, request.query);
    const results = await this.service.findPlanet(params.id, {
      ...query,
      select: {
        climates: true,
        createdAt: true,
        description: true,
        diameter: true,
        gravity: true,
        id: true,
        name: true,
        orbitalPeriod: true,
        population: true,
        rotationPeriod: true,
        surfaceWater: true,
        terrains: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/planet")
  async connectPlanet(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: PlanetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      planet: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/planet")
  async updatePlanet(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: PlanetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      planet: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/planet")
  async disconnectPlanet(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: PlanetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      planet: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Get("/:id/race")
  @ApiNestedQuery(RaceFindManyArgs)
  async findManyRace(
    @common.Req() request: Request,
    @common.Param() params: FilmWhereUniqueInput
  ): Promise<Race[]> {
    const query = plainToClass(RaceFindManyArgs, request.query);
    const results = await this.service.findRace(params.id, {
      ...query,
      select: {
        averageHeight: true,
        averageLifespan: true,
        classification: true,
        createdAt: true,
        description: true,
        designation: true,
        eyeColors: true,
        hairColors: true,
        id: true,
        language: true,
        name: true,
        skinColors: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/race")
  async connectRace(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: RaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      race: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/race")
  async updateRace(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: RaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      race: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/race")
  async disconnectRace(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: RaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      race: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Get("/:id/starship")
  @ApiNestedQuery(StarshipFindManyArgs)
  async findManyStarship(
    @common.Req() request: Request,
    @common.Param() params: FilmWhereUniqueInput
  ): Promise<Starship[]> {
    const query = plainToClass(StarshipFindManyArgs, request.query);
    const results = await this.service.findStarship(params.id, {
      ...query,
      select: {
        cargoCapacity: true,
        consumables: true,
        costInCredits: true,
        createdAt: true,
        crew: true,
        description: true,
        hyperdriveRating: true,
        id: true,
        length: true,
        manufacturer: true,
        maxAtmospheringSpeed: true,
        mglt: true,
        model: true,
        name: true,
        passengers: true,
        starshipClass: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/starship")
  async connectStarship(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: StarshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      starship: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/starship")
  async updateStarship(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: StarshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      starship: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/starship")
  async disconnectStarship(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: StarshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      starship: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Get("/:id/vehicle")
  @ApiNestedQuery(VehicleFindManyArgs)
  async findManyVehicle(
    @common.Req() request: Request,
    @common.Param() params: FilmWhereUniqueInput
  ): Promise<Vehicle[]> {
    const query = plainToClass(VehicleFindManyArgs, request.query);
    const results = await this.service.findVehicle(params.id, {
      ...query,
      select: {
        cargoCapacity: true,
        consumables: true,
        costInCredits: true,
        createdAt: true,
        crew: true,
        description: true,
        id: true,
        length: true,
        manufacturer: true,
        maxAtmospheringSpeed: true,
        model: true,
        name: true,
        passengers: true,
        updatedAt: true,
        vehicleClass: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/vehicle")
  async connectVehicle(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: VehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vehicle: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/vehicle")
  async updateVehicle(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: VehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vehicle: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/vehicle")
  async disconnectVehicle(
    @common.Param() params: FilmWhereUniqueInput,
    @common.Body() body: VehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vehicle: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
