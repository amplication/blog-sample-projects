/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreateStarshipArgs } from "./CreateStarshipArgs";
import { UpdateStarshipArgs } from "./UpdateStarshipArgs";
import { DeleteStarshipArgs } from "./DeleteStarshipArgs";
import { StarshipFindManyArgs } from "./StarshipFindManyArgs";
import { StarshipFindUniqueArgs } from "./StarshipFindUniqueArgs";
import { Starship } from "./Starship";
import { FilmFindManyArgs } from "../../film/base/FilmFindManyArgs";
import { Film } from "../../film/base/Film";
import { PersonFindManyArgs } from "../../person/base/PersonFindManyArgs";
import { Person } from "../../person/base/Person";
import { StarshipService } from "../starship.service";
@graphql.Resolver(() => Starship)
export class StarshipResolverBase {
  constructor(protected readonly service: StarshipService) {}

  async _starshipsMeta(
    @graphql.Args() args: StarshipFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [Starship])
  async starships(
    @graphql.Args() args: StarshipFindManyArgs
  ): Promise<Starship[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => Starship, { nullable: true })
  async starship(
    @graphql.Args() args: StarshipFindUniqueArgs
  ): Promise<Starship | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Starship)
  async createStarship(
    @graphql.Args() args: CreateStarshipArgs
  ): Promise<Starship> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Starship)
  async updateStarship(
    @graphql.Args() args: UpdateStarshipArgs
  ): Promise<Starship | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Starship)
  async deleteStarship(
    @graphql.Args() args: DeleteStarshipArgs
  ): Promise<Starship | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [Film])
  async films(
    @graphql.Parent() parent: Starship,
    @graphql.Args() args: FilmFindManyArgs
  ): Promise<Film[]> {
    const results = await this.service.findFilms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => [Person])
  async person(
    @graphql.Parent() parent: Starship,
    @graphql.Args() args: PersonFindManyArgs
  ): Promise<Person[]> {
    const results = await this.service.findPerson(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
