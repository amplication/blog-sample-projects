# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Film {
  createdAt: DateTime!
  description: String
  director: String
  episodeId: Float
  id: String!
  openingCrawl: String
  person(orderBy: [PersonOrderByInput!], skip: Float, take: Float, where: PersonWhereInput): [Person!]!
  planet(orderBy: [PlanetOrderByInput!], skip: Float, take: Float, where: PlanetWhereInput): [Planet!]!
  producers: JSON
  race(orderBy: [RaceOrderByInput!], skip: Float, take: Float, where: RaceWhereInput): [Race!]!
  releaseDate: DateTime
  starship(orderBy: [StarshipOrderByInput!], skip: Float, take: Float, where: StarshipWhereInput): [Starship!]!
  title: String
  updatedAt: DateTime!
  vehicle(orderBy: [VehicleOrderByInput!], skip: Float, take: Float, where: VehicleWhereInput): [Vehicle!]!
}

input FilmCreateInput {
  description: String
  director: String
  episodeId: Float
  openingCrawl: String
  person: PersonCreateNestedManyWithoutFilmsInput
  planet: PlanetCreateNestedManyWithoutFilmsInput
  producers: JSON
  race: RaceCreateNestedManyWithoutFilmsInput
  releaseDate: DateTime
  starship: StarshipCreateNestedManyWithoutFilmsInput
  title: String
  vehicle: VehicleCreateNestedManyWithoutFilmsInput
}

input FilmCreateNestedManyWithoutPeopleInput {
  connect: [FilmWhereUniqueInput!]
}

input FilmCreateNestedManyWithoutPlanetsInput {
  connect: [FilmWhereUniqueInput!]
}

input FilmCreateNestedManyWithoutRacesInput {
  connect: [FilmWhereUniqueInput!]
}

input FilmCreateNestedManyWithoutStarshipsInput {
  connect: [FilmWhereUniqueInput!]
}

input FilmCreateNestedManyWithoutVehiclesInput {
  connect: [FilmWhereUniqueInput!]
}

input FilmListRelationFilter {
  every: FilmWhereInput
  none: FilmWhereInput
  some: FilmWhereInput
}

input FilmOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  director: SortOrder
  episodeId: SortOrder
  id: SortOrder
  openingCrawl: SortOrder
  producers: SortOrder
  releaseDate: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input FilmUpdateInput {
  description: String
  director: String
  episodeId: Float
  openingCrawl: String
  person: PersonUpdateManyWithoutFilmsInput
  planet: PlanetUpdateManyWithoutFilmsInput
  producers: JSON
  race: RaceUpdateManyWithoutFilmsInput
  releaseDate: DateTime
  starship: StarshipUpdateManyWithoutFilmsInput
  title: String
  vehicle: VehicleUpdateManyWithoutFilmsInput
}

input FilmUpdateManyWithoutPeopleInput {
  connect: [FilmWhereUniqueInput!]
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
}

input FilmUpdateManyWithoutPlanetsInput {
  connect: [FilmWhereUniqueInput!]
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
}

input FilmUpdateManyWithoutRacesInput {
  connect: [FilmWhereUniqueInput!]
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
}

input FilmUpdateManyWithoutStarshipsInput {
  connect: [FilmWhereUniqueInput!]
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
}

input FilmUpdateManyWithoutVehiclesInput {
  connect: [FilmWhereUniqueInput!]
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
}

input FilmWhereInput {
  description: StringNullableFilter
  director: StringNullableFilter
  episodeId: IntNullableFilter
  id: StringFilter
  openingCrawl: StringNullableFilter
  person: PersonListRelationFilter
  planet: PlanetListRelationFilter
  producers: JsonFilter
  race: RaceListRelationFilter
  releaseDate: DateTimeNullableFilter
  starship: StarshipListRelationFilter
  title: StringNullableFilter
  vehicle: VehicleListRelationFilter
}

input FilmWhereUniqueInput {
  id: String!
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type Mutation {
  createFilm(data: FilmCreateInput!): Film!
  createPerson(data: PersonCreateInput!): Person!
  createPlanet(data: PlanetCreateInput!): Planet!
  createRace(data: RaceCreateInput!): Race!
  createStarship(data: StarshipCreateInput!): Starship!
  createUser(data: UserCreateInput!): User!
  createVehicle(data: VehicleCreateInput!): Vehicle!
  deleteFilm(where: FilmWhereUniqueInput!): Film!
  deletePerson(where: PersonWhereUniqueInput!): Person!
  deletePlanet(where: PlanetWhereUniqueInput!): Planet!
  deleteRace(where: RaceWhereUniqueInput!): Race!
  deleteStarship(where: StarshipWhereUniqueInput!): Starship!
  deleteUser(where: UserWhereUniqueInput!): User!
  deleteVehicle(where: VehicleWhereUniqueInput!): Vehicle!
  updateFilm(data: FilmUpdateInput!, where: FilmWhereUniqueInput!): Film!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person!
  updatePlanet(data: PlanetUpdateInput!, where: PlanetWhereUniqueInput!): Planet!
  updateRace(data: RaceUpdateInput!, where: RaceWhereUniqueInput!): Race!
  updateStarship(data: StarshipUpdateInput!, where: StarshipWhereUniqueInput!): Starship!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateVehicle(data: VehicleUpdateInput!, where: VehicleWhereUniqueInput!): Vehicle!
}

type Person {
  birthYear: String
  createdAt: DateTime!
  description: String
  eyeColor: String
  films(orderBy: [FilmOrderByInput!], skip: Float, take: Float, where: FilmWhereInput): [Film!]!
  gender: String
  hairColor: String
  height: Float
  id: String!
  mass: Float
  name: String
  planet: Planet
  races(orderBy: [RaceOrderByInput!], skip: Float, take: Float, where: RaceWhereInput): [Race!]!
  skinColor: String
  starships(orderBy: [StarshipOrderByInput!], skip: Float, take: Float, where: StarshipWhereInput): [Starship!]!
  updatedAt: DateTime!
  vehicles(orderBy: [VehicleOrderByInput!], skip: Float, take: Float, where: VehicleWhereInput): [Vehicle!]!
}

input PersonCreateInput {
  birthYear: String
  description: String
  eyeColor: String
  films: FilmCreateNestedManyWithoutPeopleInput
  gender: String
  hairColor: String
  height: Float
  mass: Float
  name: String
  planet: PlanetWhereUniqueInput
  races: RaceCreateNestedManyWithoutPeopleInput
  skinColor: String
  starships: StarshipCreateNestedManyWithoutPeopleInput
  vehicles: VehicleCreateNestedManyWithoutPeopleInput
}

input PersonCreateNestedManyWithoutFilmsInput {
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateNestedManyWithoutPlanetsInput {
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateNestedManyWithoutRacesInput {
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateNestedManyWithoutStarshipsInput {
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateNestedManyWithoutVehiclesInput {
  connect: [PersonWhereUniqueInput!]
}

input PersonListRelationFilter {
  every: PersonWhereInput
  none: PersonWhereInput
  some: PersonWhereInput
}

input PersonOrderByInput {
  birthYear: SortOrder
  createdAt: SortOrder
  description: SortOrder
  eyeColor: SortOrder
  gender: SortOrder
  hairColor: SortOrder
  height: SortOrder
  id: SortOrder
  mass: SortOrder
  name: SortOrder
  planetId: SortOrder
  skinColor: SortOrder
  updatedAt: SortOrder
}

input PersonUpdateInput {
  birthYear: String
  description: String
  eyeColor: String
  films: FilmUpdateManyWithoutPeopleInput
  gender: String
  hairColor: String
  height: Float
  mass: Float
  name: String
  planet: PlanetWhereUniqueInput
  races: RaceUpdateManyWithoutPeopleInput
  skinColor: String
  starships: StarshipUpdateManyWithoutPeopleInput
  vehicles: VehicleUpdateManyWithoutPeopleInput
}

input PersonUpdateManyWithoutFilmsInput {
  connect: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
}

input PersonUpdateManyWithoutPlanetsInput {
  connect: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
}

input PersonUpdateManyWithoutRacesInput {
  connect: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
}

input PersonUpdateManyWithoutStarshipsInput {
  connect: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
}

input PersonUpdateManyWithoutVehiclesInput {
  connect: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
}

input PersonWhereInput {
  birthYear: StringNullableFilter
  description: StringNullableFilter
  eyeColor: StringNullableFilter
  films: FilmListRelationFilter
  gender: StringNullableFilter
  hairColor: StringNullableFilter
  height: IntNullableFilter
  id: StringFilter
  mass: FloatNullableFilter
  name: StringNullableFilter
  planet: PlanetWhereUniqueInput
  races: RaceListRelationFilter
  skinColor: StringNullableFilter
  starships: StarshipListRelationFilter
  vehicles: VehicleListRelationFilter
}

input PersonWhereUniqueInput {
  id: String!
}

type Planet {
  climates: JSON
  createdAt: DateTime!
  description: String
  diameter: Float
  films(orderBy: [FilmOrderByInput!], skip: Float, take: Float, where: FilmWhereInput): [Film!]!
  gravity: String
  id: String!
  name: String
  orbitalPeriod: Float
  people(orderBy: [PersonOrderByInput!], skip: Float, take: Float, where: PersonWhereInput): [Person!]!
  population: Float
  rotationPeriod: Float
  surfaceWater: Float
  terrains: JSON
  updatedAt: DateTime!
}

input PlanetCreateInput {
  climates: JSON
  description: String
  diameter: Float
  films: FilmCreateNestedManyWithoutPlanetsInput
  gravity: String
  name: String
  orbitalPeriod: Float
  people: PersonCreateNestedManyWithoutPlanetsInput
  population: Float
  rotationPeriod: Float
  surfaceWater: Float
  terrains: JSON
}

input PlanetCreateNestedManyWithoutFilmsInput {
  connect: [PlanetWhereUniqueInput!]
}

input PlanetListRelationFilter {
  every: PlanetWhereInput
  none: PlanetWhereInput
  some: PlanetWhereInput
}

input PlanetOrderByInput {
  climates: SortOrder
  createdAt: SortOrder
  description: SortOrder
  diameter: SortOrder
  gravity: SortOrder
  id: SortOrder
  name: SortOrder
  orbitalPeriod: SortOrder
  population: SortOrder
  rotationPeriod: SortOrder
  surfaceWater: SortOrder
  terrains: SortOrder
  updatedAt: SortOrder
}

input PlanetUpdateInput {
  climates: JSON
  description: String
  diameter: Float
  films: FilmUpdateManyWithoutPlanetsInput
  gravity: String
  name: String
  orbitalPeriod: Float
  people: PersonUpdateManyWithoutPlanetsInput
  population: Float
  rotationPeriod: Float
  surfaceWater: Float
  terrains: JSON
}

input PlanetUpdateManyWithoutFilmsInput {
  connect: [PlanetWhereUniqueInput!]
  disconnect: [PlanetWhereUniqueInput!]
  set: [PlanetWhereUniqueInput!]
}

input PlanetWhereInput {
  climates: JsonFilter
  description: StringNullableFilter
  diameter: IntNullableFilter
  films: FilmListRelationFilter
  gravity: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  orbitalPeriod: IntNullableFilter
  people: PersonListRelationFilter
  population: FloatNullableFilter
  rotationPeriod: IntNullableFilter
  surfaceWater: FloatNullableFilter
  terrains: JsonFilter
}

input PlanetWhereUniqueInput {
  id: String!
}

type Query {
  film(where: FilmWhereUniqueInput!): Film
  films(orderBy: [FilmOrderByInput!], skip: Float, take: Float, where: FilmWhereInput): [Film!]!
  people(orderBy: [PersonOrderByInput!], skip: Float, take: Float, where: PersonWhereInput): [Person!]!
  person(where: PersonWhereUniqueInput!): Person
  planet(where: PlanetWhereUniqueInput!): Planet
  planets(orderBy: [PlanetOrderByInput!], skip: Float, take: Float, where: PlanetWhereInput): [Planet!]!
  race(where: RaceWhereUniqueInput!): Race
  races(orderBy: [RaceOrderByInput!], skip: Float, take: Float, where: RaceWhereInput): [Race!]!
  starship(where: StarshipWhereUniqueInput!): Starship
  starships(orderBy: [StarshipOrderByInput!], skip: Float, take: Float, where: StarshipWhereInput): [Starship!]!
  user(where: UserWhereUniqueInput!): User
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  vehicles(orderBy: [VehicleOrderByInput!], skip: Float, take: Float, where: VehicleWhereInput): [Vehicle!]!
}

enum QueryMode {
  Default
  Insensitive
}

type Race {
  averageHeight: Float
  averageLifespan: Float
  classification: String
  createdAt: DateTime!
  description: String
  designation: String
  eyeColors: JSON
  films(orderBy: [FilmOrderByInput!], skip: Float, take: Float, where: FilmWhereInput): [Film!]!
  hairColors: JSON
  id: String!
  language: String
  name: String
  person(orderBy: [PersonOrderByInput!], skip: Float, take: Float, where: PersonWhereInput): [Person!]!
  skinColors: JSON
  updatedAt: DateTime!
}

input RaceCreateInput {
  averageHeight: Float
  averageLifespan: Float
  classification: String
  description: String
  designation: String
  eyeColors: JSON
  films: FilmCreateNestedManyWithoutRacesInput
  hairColors: JSON
  language: String
  name: String
  person: PersonCreateNestedManyWithoutRacesInput
  skinColors: JSON
}

input RaceCreateNestedManyWithoutFilmsInput {
  connect: [RaceWhereUniqueInput!]
}

input RaceCreateNestedManyWithoutPeopleInput {
  connect: [RaceWhereUniqueInput!]
}

input RaceListRelationFilter {
  every: RaceWhereInput
  none: RaceWhereInput
  some: RaceWhereInput
}

input RaceOrderByInput {
  averageHeight: SortOrder
  averageLifespan: SortOrder
  classification: SortOrder
  createdAt: SortOrder
  description: SortOrder
  designation: SortOrder
  eyeColors: SortOrder
  hairColors: SortOrder
  id: SortOrder
  language: SortOrder
  name: SortOrder
  skinColors: SortOrder
  updatedAt: SortOrder
}

input RaceUpdateInput {
  averageHeight: Float
  averageLifespan: Float
  classification: String
  description: String
  designation: String
  eyeColors: JSON
  films: FilmUpdateManyWithoutRacesInput
  hairColors: JSON
  language: String
  name: String
  person: PersonUpdateManyWithoutRacesInput
  skinColors: JSON
}

input RaceUpdateManyWithoutFilmsInput {
  connect: [RaceWhereUniqueInput!]
  disconnect: [RaceWhereUniqueInput!]
  set: [RaceWhereUniqueInput!]
}

input RaceUpdateManyWithoutPeopleInput {
  connect: [RaceWhereUniqueInput!]
  disconnect: [RaceWhereUniqueInput!]
  set: [RaceWhereUniqueInput!]
}

input RaceWhereInput {
  averageHeight: FloatNullableFilter
  averageLifespan: IntNullableFilter
  classification: StringNullableFilter
  description: StringNullableFilter
  designation: StringNullableFilter
  eyeColors: JsonFilter
  films: FilmListRelationFilter
  hairColors: JsonFilter
  id: StringFilter
  language: StringNullableFilter
  name: StringNullableFilter
  person: PersonListRelationFilter
  skinColors: JsonFilter
}

input RaceWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

type Starship {
  cargoCapacity: Float
  consumables: String
  costInCredits: Float
  createdAt: DateTime!
  crew: String
  description: String
  films(orderBy: [FilmOrderByInput!], skip: Float, take: Float, where: FilmWhereInput): [Film!]!
  hyperdriveRating: Float
  id: String!
  length: Float
  manufacturer: JSON
  maxAtmospheringSpeed: Float
  mglt: Float
  model: String
  name: String
  passengers: String
  person(orderBy: [PersonOrderByInput!], skip: Float, take: Float, where: PersonWhereInput): [Person!]!
  starshipClass: String
  updatedAt: DateTime!
}

input StarshipCreateInput {
  cargoCapacity: Float
  consumables: String
  costInCredits: Float
  crew: String
  description: String
  films: FilmCreateNestedManyWithoutStarshipsInput
  hyperdriveRating: Float
  length: Float
  manufacturer: JSON
  maxAtmospheringSpeed: Float
  mglt: Float
  model: String
  name: String
  passengers: String
  person: PersonCreateNestedManyWithoutStarshipsInput
  starshipClass: String
}

input StarshipCreateNestedManyWithoutFilmsInput {
  connect: [StarshipWhereUniqueInput!]
}

input StarshipCreateNestedManyWithoutPeopleInput {
  connect: [StarshipWhereUniqueInput!]
}

input StarshipListRelationFilter {
  every: StarshipWhereInput
  none: StarshipWhereInput
  some: StarshipWhereInput
}

input StarshipOrderByInput {
  cargoCapacity: SortOrder
  consumables: SortOrder
  costInCredits: SortOrder
  createdAt: SortOrder
  crew: SortOrder
  description: SortOrder
  hyperdriveRating: SortOrder
  id: SortOrder
  length: SortOrder
  manufacturer: SortOrder
  maxAtmospheringSpeed: SortOrder
  mglt: SortOrder
  model: SortOrder
  name: SortOrder
  passengers: SortOrder
  starshipClass: SortOrder
  updatedAt: SortOrder
}

input StarshipUpdateInput {
  cargoCapacity: Float
  consumables: String
  costInCredits: Float
  crew: String
  description: String
  films: FilmUpdateManyWithoutStarshipsInput
  hyperdriveRating: Float
  length: Float
  manufacturer: JSON
  maxAtmospheringSpeed: Float
  mglt: Float
  model: String
  name: String
  passengers: String
  person: PersonUpdateManyWithoutStarshipsInput
  starshipClass: String
}

input StarshipUpdateManyWithoutFilmsInput {
  connect: [StarshipWhereUniqueInput!]
  disconnect: [StarshipWhereUniqueInput!]
  set: [StarshipWhereUniqueInput!]
}

input StarshipUpdateManyWithoutPeopleInput {
  connect: [StarshipWhereUniqueInput!]
  disconnect: [StarshipWhereUniqueInput!]
  set: [StarshipWhereUniqueInput!]
}

input StarshipWhereInput {
  cargoCapacity: FloatNullableFilter
  consumables: StringNullableFilter
  costInCredits: FloatNullableFilter
  crew: StringNullableFilter
  description: StringNullableFilter
  films: FilmListRelationFilter
  hyperdriveRating: FloatNullableFilter
  id: StringFilter
  length: FloatNullableFilter
  manufacturer: JsonFilter
  maxAtmospheringSpeed: IntNullableFilter
  mglt: IntNullableFilter
  model: StringNullableFilter
  name: StringNullableFilter
  passengers: StringNullableFilter
  person: PersonListRelationFilter
  starshipClass: StringNullableFilter
}

input StarshipWhereUniqueInput {
  id: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}

type Vehicle {
  cargoCapacity: Float
  consumables: String
  costInCredits: Float
  createdAt: DateTime!
  crew: String
  description: String
  films(orderBy: [FilmOrderByInput!], skip: Float, take: Float, where: FilmWhereInput): [Film!]!
  id: String!
  length: Float
  manufacturer: JSON
  maxAtmospheringSpeed: Float
  model: String
  name: String
  passengers: String
  person(orderBy: [PersonOrderByInput!], skip: Float, take: Float, where: PersonWhereInput): [Person!]!
  updatedAt: DateTime!
  vehicleClass: String
}

input VehicleCreateInput {
  cargoCapacity: Float
  consumables: String
  costInCredits: Float
  crew: String
  description: String
  films: FilmCreateNestedManyWithoutVehiclesInput
  length: Float
  manufacturer: JSON
  maxAtmospheringSpeed: Float
  model: String
  name: String
  passengers: String
  person: PersonCreateNestedManyWithoutVehiclesInput
  vehicleClass: String
}

input VehicleCreateNestedManyWithoutFilmsInput {
  connect: [VehicleWhereUniqueInput!]
}

input VehicleCreateNestedManyWithoutPeopleInput {
  connect: [VehicleWhereUniqueInput!]
}

input VehicleListRelationFilter {
  every: VehicleWhereInput
  none: VehicleWhereInput
  some: VehicleWhereInput
}

input VehicleOrderByInput {
  cargoCapacity: SortOrder
  consumables: SortOrder
  costInCredits: SortOrder
  createdAt: SortOrder
  crew: SortOrder
  description: SortOrder
  id: SortOrder
  length: SortOrder
  manufacturer: SortOrder
  maxAtmospheringSpeed: SortOrder
  model: SortOrder
  name: SortOrder
  passengers: SortOrder
  updatedAt: SortOrder
  vehicleClass: SortOrder
}

input VehicleUpdateInput {
  cargoCapacity: Float
  consumables: String
  costInCredits: Float
  crew: String
  description: String
  films: FilmUpdateManyWithoutVehiclesInput
  length: Float
  manufacturer: JSON
  maxAtmospheringSpeed: Float
  model: String
  name: String
  passengers: String
  person: PersonUpdateManyWithoutVehiclesInput
  vehicleClass: String
}

input VehicleUpdateManyWithoutFilmsInput {
  connect: [VehicleWhereUniqueInput!]
  disconnect: [VehicleWhereUniqueInput!]
  set: [VehicleWhereUniqueInput!]
}

input VehicleUpdateManyWithoutPeopleInput {
  connect: [VehicleWhereUniqueInput!]
  disconnect: [VehicleWhereUniqueInput!]
  set: [VehicleWhereUniqueInput!]
}

input VehicleWhereInput {
  cargoCapacity: FloatNullableFilter
  consumables: StringNullableFilter
  costInCredits: FloatNullableFilter
  crew: StringNullableFilter
  description: StringNullableFilter
  films: FilmListRelationFilter
  id: StringFilter
  length: FloatNullableFilter
  manufacturer: JsonFilter
  maxAtmospheringSpeed: IntNullableFilter
  model: StringNullableFilter
  name: StringNullableFilter
  passengers: StringNullableFilter
  person: PersonListRelationFilter
  vehicleClass: StringNullableFilter
}

input VehicleWhereUniqueInput {
  id: String!
}
