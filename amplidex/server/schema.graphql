# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Generation {
  createdAt: DateTime!
  id: String!
  monsters(orderBy: [MonsterOrderByInput!], skip: Float, take: Float, where: MonsterWhereInput): [Monster!]!
  name: String!
  updatedAt: DateTime!
}

input GenerationCreateInput {
  monsters: MonsterCreateNestedManyWithoutGenerationsInput
  name: String!
}

input GenerationOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GenerationUpdateInput {
  monsters: MonsterUpdateManyWithoutGenerationsInput
  name: String
}

input GenerationWhereInput {
  id: StringFilter
  monsters: MonsterListRelationFilter
  name: StringFilter
}

input GenerationWhereUniqueInput {
  id: String!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MetaQueryPayload {
  count: Float!
}

type Monster {
  biology: String!
  createdAt: DateTime!
  dexNumber: Float!
  generation: Generation
  id: String!
  image: String!
  name: String!
  typing(orderBy: [TypingOrderByInput!], skip: Float, take: Float, where: TypingWhereInput): [Typing!]!
  updatedAt: DateTime!
  url: String!
}

input MonsterCreateInput {
  biology: String!
  dexNumber: Float!
  generation: GenerationWhereUniqueInput!
  image: String!
  name: String!
  typing: TypingCreateNestedManyWithoutMonstersInput
  url: String!
}

input MonsterCreateNestedManyWithoutGenerationsInput {
  connect: [MonsterWhereUniqueInput!]
}

input MonsterCreateNestedManyWithoutTypingsInput {
  connect: [MonsterWhereUniqueInput!]
}

input MonsterListRelationFilter {
  every: MonsterWhereInput
  none: MonsterWhereInput
  some: MonsterWhereInput
}

input MonsterOrderByInput {
  biology: SortOrder
  createdAt: SortOrder
  dexNumber: SortOrder
  generationId: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input MonsterUpdateInput {
  biology: String
  dexNumber: Float
  generation: GenerationWhereUniqueInput
  image: String
  name: String
  typing: TypingUpdateManyWithoutMonstersInput
  url: String
}

input MonsterUpdateManyWithoutGenerationsInput {
  connect: [MonsterWhereUniqueInput!]
  disconnect: [MonsterWhereUniqueInput!]
  set: [MonsterWhereUniqueInput!]
}

input MonsterUpdateManyWithoutTypingsInput {
  connect: [MonsterWhereUniqueInput!]
  disconnect: [MonsterWhereUniqueInput!]
  set: [MonsterWhereUniqueInput!]
}

input MonsterWhereInput {
  biology: StringFilter
  dexNumber: IntFilter
  generation: GenerationWhereUniqueInput
  id: StringFilter
  image: StringFilter
  name: StringFilter
  typing: TypingListRelationFilter
  url: StringFilter
}

input MonsterWhereUniqueInput {
  id: String!
}

type Mutation {
  createGeneration(data: GenerationCreateInput!): Generation!
  createMonster(data: MonsterCreateInput!): Monster!
  createTyping(data: TypingCreateInput!): Typing!
  createUser(data: UserCreateInput!): User!
  deleteGeneration(where: GenerationWhereUniqueInput!): Generation!
  deleteMonster(where: MonsterWhereUniqueInput!): Monster!
  deleteTyping(where: TypingWhereUniqueInput!): Typing!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateGeneration(data: GenerationUpdateInput!, where: GenerationWhereUniqueInput!): Generation!
  updateMonster(data: MonsterUpdateInput!, where: MonsterWhereUniqueInput!): Monster!
  updateTyping(data: TypingUpdateInput!, where: TypingWhereUniqueInput!): Typing!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _generationsMeta(orderBy: [GenerationOrderByInput!], skip: Float, take: Float, where: GenerationWhereInput): MetaQueryPayload!
  _monstersMeta(orderBy: [MonsterOrderByInput!], skip: Float, take: Float, where: MonsterWhereInput): MetaQueryPayload!
  _typingsMeta(orderBy: [TypingOrderByInput!], skip: Float, take: Float, where: TypingWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  generation(where: GenerationWhereUniqueInput!): Generation
  generations(orderBy: [GenerationOrderByInput!], skip: Float, take: Float, where: GenerationWhereInput): [Generation!]!
  monster(where: MonsterWhereUniqueInput!): Monster
  monsters(orderBy: [MonsterOrderByInput!], skip: Float, take: Float, where: MonsterWhereInput): [Monster!]!
  typing(where: TypingWhereUniqueInput!): Typing
  typings(orderBy: [TypingOrderByInput!], skip: Float, take: Float, where: TypingWhereInput): [Typing!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Typing {
  createdAt: DateTime!
  id: String!
  monsters(orderBy: [MonsterOrderByInput!], skip: Float, take: Float, where: MonsterWhereInput): [Monster!]!
  name: String!
  updatedAt: DateTime!
}

input TypingCreateInput {
  monsters: MonsterCreateNestedManyWithoutTypingsInput
  name: String!
}

input TypingCreateNestedManyWithoutMonstersInput {
  connect: [TypingWhereUniqueInput!]
}

input TypingListRelationFilter {
  every: TypingWhereInput
  none: TypingWhereInput
  some: TypingWhereInput
}

input TypingOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TypingUpdateInput {
  monsters: MonsterUpdateManyWithoutTypingsInput
  name: String
}

input TypingUpdateManyWithoutMonstersInput {
  connect: [TypingWhereUniqueInput!]
  disconnect: [TypingWhereUniqueInput!]
  set: [TypingWhereUniqueInput!]
}

input TypingWhereInput {
  id: StringFilter
  monsters: MonsterListRelationFilter
  name: StringFilter
}

input TypingWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
